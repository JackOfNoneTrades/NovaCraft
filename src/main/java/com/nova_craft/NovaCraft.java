package com.nova_craft;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import cpw.mods.fml.common.Mod;
import cpw.mods.fml.common.SidedProxy;
import cpw.mods.fml.common.event.FMLInitializationEvent;
import cpw.mods.fml.common.event.FMLPostInitializationEvent;
import cpw.mods.fml.common.event.FMLPreInitializationEvent;
import cpw.mods.fml.common.event.FMLServerStartingEvent;

import net.minecraft.entity.EnumCreatureType;
import net.minecraft.entity.monster.EntityZombie;
import net.minecraft.server.MinecraftServer;
import net.minecraft.util.EnumChatFormatting;
import net.minecraft.util.ResourceLocation;
import net.minecraft.world.World;
import net.minecraft.world.biome.BiomeGenBase;
import net.minecraft.world.biome.BiomeGenBase.SpawnListEntry;
import net.minecraft.world.gen.structure.MapGenStructureIO;
import net.minecraftforge.common.BiomeDictionary;
import net.minecraftforge.common.MinecraftForge;
import net.minecraftforge.common.BiomeDictionary.Type;

import java.io.File;
import java.util.List;
import java.util.Random;

import com.nova_craft.Items.NovaCraftItems;
import com.nova_craft.TileEntity.NovaCraftTileEntities;
import com.nova_craft.achievements.AchievementsNovaCraft;
import com.nova_craft.achievements.NovaCraftEventHandler;
import com.nova_craft.config.Configs;
import com.nova_craft.config.ConfigsMain;
import com.nova_craft.entity.EntitiesNovaCraft;
import com.nova_craft.entity.EntityOutsider;
import com.nova_craft.entity.EntityOutsiderEye;
import com.nova_craft.entity.hardmode.EntityHardmodeCreeper;
import com.nova_craft.entity.hardmode.EntityHardmodeGhast;
import com.nova_craft.entity.hardmode.EntityHardmodeMagmaCube;
import com.nova_craft.entity.hardmode.EntityHardmodeSkeleton;
import com.nova_craft.entity.hardmode.EntityHardmodeSlime;
import com.nova_craft.entity.hardmode.EntityHardmodeSpider;
import com.nova_craft.entity.hardmode.EntityHardmodeZombie;
import com.nova_craft.registry.NovaCraftCreativeTabs;
import com.nova_craft.registry.NovaCraftFuelHander;
import com.nova_craft.registry.NovaCraftRegistries;
import com.nova_craft.world.NCWorldGeneratorVillages;
import com.nova_craft.world.NCWorldGeneratorPlants;
import com.nova_craft.world.NCWorldGeneratorPost;
import com.nova_craft.world.NCWorldGeneratorPre;
import com.nova_craft.world.OreGenEventHandler;
import com.nova_craft.world.PopulateChunkEventHandler;
import com.nova_craft.world.ancient_city.AncientCityGen;
import com.nova_craft.world.end.DestitudeIslandWorldGen;
import com.nova_craft.world.end.EndIslandWorldGen;
import com.nova_craft.world.end.NCWorldGeneratorEnd;
import com.nova_craft.world.nether.NCWorldGeneratorNether;
import com.nova_craft.world.nether.structure.MapGenNetherBridgeNovaCraft;
import com.nova_craft.world.nether.structure.NovaNetherBridgeGenerator;
import com.nova_craft.world.nether.structure.StructureNovaCraftNetherBridgePieces;
import com.nova_craft.world.sculkshaft.SculkMineshaftGenerator;
import com.nova_craft.world.sculkshaft.StructureSculkMineshaftPieces;
import com.nova_craft.world.sculkshaft.StructureSculkMineshaftStart;
import com.nova_craftBlocks.NovaCraftBlocks;
import com.nova_craftBlocks.potion.NovaCraftLiquids;

import cpw.mods.fml.common.FMLCommonHandler;
import cpw.mods.fml.common.IWorldGenerator;
import cpw.mods.fml.common.ObfuscationReflectionHelper;
import cpw.mods.fml.common.Mod.Instance;
import cpw.mods.fml.common.network.IGuiHandler;
import cpw.mods.fml.common.network.NetworkRegistry;
import cpw.mods.fml.common.network.simpleimpl.SimpleNetworkWrapper;
import cpw.mods.fml.common.registry.EntityRegistry;
import cpw.mods.fml.common.registry.GameRegistry;

@Mod(modid = NovaCraft.MODID, version = Tags.VERSION, name = "NovaCraft", acceptedMinecraftVersions = "[1.7.10]")
public class NovaCraft {

    public static final String MODID = "nova_craft";
    public static final Logger logger = LogManager.getLogger(MODID);

    public static Random rand;
    private World worldObj;

    @Instance(NovaCraft.MODID)
    public static NovaCraft instance;

    @SidedProxy(clientSide = "com.nova_craft.ClientProxy", serverSide = "com.nova_craft.CommonProxy")
    public static CommonProxy proxy;
    public static SimpleNetworkWrapper networkWrapper;

    public CommonProxy guiHandler;
    public static File configFile;

    public NovaCraft() {
        this.guiHandler = new CommonProxy();
    }

    @Mod.EventHandler
    // preInit "Run before anything else. Read your config, create blocks, items, etc, and register them with the
    // GameRegistry." (Remove if not needed)
    public void preInit(FMLPreInitializationEvent event) {
        proxy.preInit(event);

        event.getModMetadata().autogenerated = false;
        event.getModMetadata().name = EnumChatFormatting.DARK_AQUA + "NovaCraft"+ EnumChatFormatting.DARK_PURPLE;
        event.getModMetadata().version = EnumChatFormatting.BLUE + "1.4";
        event.getModMetadata().credits = EnumChatFormatting.AQUA + " Special thanks to Roadhog360 " + ", Delirus" + " & rrogalski ";
        event.getModMetadata().authorList.add(EnumChatFormatting.BLUE + "Wojak");
        event.getModMetadata().url = EnumChatFormatting.GRAY + "https://www.curseforge.com/minecraft/mc-mods/novacraft";
        event.getModMetadata().description = EnumChatFormatting.GREEN + "A 1.7.10 mod that looks to complement/enhance the base game";

        NovaCraft.instance = this;

        ConfigsMain.loadConfigs(NovaCraft.configFile = new File(event.getModConfigurationDirectory(), "NovaCraft"));
        NovaCraftOverrideTextures.init();

        FMLCommonHandler.instance().bus().register((Object)this);

        NovaCraftLiquids.preInit();

        NovaCraftItems.initialization();
    	NovaCraftBlocks.initialization();
    	NovaCraftBlocks.initializeHarvestLevels();

        MinecraftForge.TERRAIN_GEN_BUS.register((Object)this);
        MinecraftForge.ORE_GEN_BUS.register(new OreGenEventHandler());
        MinecraftForge.EVENT_BUS.register(new PopulateChunkEventHandler());

        GameRegistry.registerWorldGenerator((IWorldGenerator)new NCWorldGeneratorPre(), Integer.MAX_VALUE);
        GameRegistry.registerWorldGenerator((IWorldGenerator)new NCWorldGeneratorVillages(), Integer.MAX_VALUE);

        if (Configs.enableSculkInfestedMineshaft) {
        GameRegistry.registerWorldGenerator(new SculkMineshaftGenerator(), 0);
        MapGenStructureIO.registerStructure(StructureSculkMineshaftStart.class, "SculkMineshaft");
        StructureSculkMineshaftPieces.registerStructurePieces();
        }

        if (Configs.enableDeepoidFortress) {
        GameRegistry.registerWorldGenerator(new NovaNetherBridgeGenerator(), 0);
		MapGenStructureIO.registerStructure(MapGenNetherBridgeNovaCraft.Start.class, "NovaFortress");
		StructureNovaCraftNetherBridgePieces.registerStructureNovaCraftNetherBridgePieces();
        }

        if (Configs.enableAncientCity) {
    	GameRegistry.registerWorldGenerator((IWorldGenerator)new AncientCityGen(), Integer.MAX_VALUE);
        }
    }

    @Mod.EventHandler
    // load "Do your mod setup. Build whatever data structures you care about. Register recipes." (Remove if not needed)
    public void init(FMLInitializationEvent event) {
        proxy.init(event);

        EntitiesNovaCraft.initialization();
    	EntitiesNovaCraft.addSpawns();
    	NovaCraftCreativeTabs.initialization();
    	NovaCraftRegistries.register();
    	GameRegistry.registerFuelHandler(new NovaCraftFuelHander());
    	AchievementsNovaCraft.initialization();
    	NovaCraftTileEntities.initialization();

    	GameRegistry.registerWorldGenerator((IWorldGenerator)new EndIslandWorldGen(), Integer.MAX_VALUE);
    	//GameRegistry.registerWorldGenerator((IWorldGenerator)new LivingEnderIslandWorldGen(), Integer.MAX_VALUE);
    	GameRegistry.registerWorldGenerator((IWorldGenerator)new DestitudeIslandWorldGen(), Integer.MAX_VALUE);

    	NetworkRegistry.INSTANCE.registerGuiHandler((Object)NovaCraft.instance, (IGuiHandler)new CommonProxy());

    	proxy.registerRenderers();
    	CommonProxy.registerEvent(new NovaCraftClientEvents());
    	CommonProxy.registerEvent(new NovaCraftEventHandler());
    }

    @Mod.EventHandler
    // postInit "Handle interaction with other mods, complete your setup based on this." (Remove if not needed)
    public void postInit(FMLPostInitializationEvent event) {
        proxy.postInit(event);

        GameRegistry.registerWorldGenerator(NCWorldGeneratorNether.INSTANCE, Integer.MAX_VALUE);
    	GameRegistry.registerWorldGenerator(NCWorldGeneratorEnd.INSTANCE, Integer.MAX_VALUE);
      	GameRegistry.registerWorldGenerator((IWorldGenerator)new NCWorldGeneratorPost(), Integer.MAX_VALUE);
      	GameRegistry.registerWorldGenerator(NCWorldGeneratorPlants.INSTANCE, Integer.MAX_VALUE);
    }

    @Mod.EventHandler
    // register server commands in this event handler (Remove if not needed)
    public void serverStarting(FMLServerStartingEvent event) {
        proxy.serverStarting(event);

        World world = MinecraftServer.getServer().worldServers[0];
        Hardmode data = Hardmode.get(world);

        if (data.getHardmode()) {
            System.out.println("Hardmode is active! Spawning hardmode mobs...");
            registerHardmodeMobs(world);
        }
    }

    public void registerHardmodeMobs(World world) {
        for (int i = 0; i < BiomeGenBase.getBiomeGenArray().length; i++) {
            BiomeGenBase biome = BiomeGenBase.getBiomeGenArray()[i];

            if (biome != null && overworldBiome(biome)) {
                EntityRegistry.addSpawn(EntityHardmodeCreeper.class, 12, 3, 12, EnumCreatureType.monster, biome);
                EntityRegistry.addSpawn(EntityHardmodeSpider.class, 10, 4, 10, EnumCreatureType.monster, biome);
                EntityRegistry.addSpawn(EntityHardmodeZombie.class, 15, 5, 15, EnumCreatureType.monster, biome);
                EntityRegistry.addSpawn(EntityHardmodeSkeleton.class, 15, 5, 15, EnumCreatureType.monster, biome);
                EntityRegistry.addSpawn(EntityHardmodeSlime.class, 2, 3, 2, EnumCreatureType.monster, BiomeDictionary.getBiomesForType(Type.SWAMP));
                EntityRegistry.addSpawn(EntityOutsiderEye.class, 2, 2, 2, EnumCreatureType.monster, biome);
                EntityRegistry.addSpawn(EntityOutsider.class, 2, 2, 2, EnumCreatureType.monster, biome);
            }

            if (biome != null) {
            EntityRegistry.addSpawn(EntityHardmodeMagmaCube.class, 8, 2, 8, EnumCreatureType.monster, BiomeDictionary.getBiomesForType(Type.NETHER));
            EntityRegistry.addSpawn(EntityHardmodeGhast.class, 10, 1, 10, EnumCreatureType.monster, BiomeDictionary.getBiomesForType(Type.NETHER));
            EntityRegistry.addSpawn(EntityOutsiderEye.class, 2, 2, 2, EnumCreatureType.monster, BiomeDictionary.getBiomesForType(Type.NETHER));
            EntityRegistry.addSpawn(EntityOutsider.class, 2, 2, 2, EnumCreatureType.monster, BiomeDictionary.getBiomesForType(Type.NETHER));

            EntityRegistry.addSpawn(EntityOutsiderEye.class, 2, 2, 2, EnumCreatureType.monster, BiomeDictionary.getBiomesForType(Type.END));
            EntityRegistry.addSpawn(EntityOutsider.class, 2, 2, 2, EnumCreatureType.monster, BiomeDictionary.getBiomesForType(Type.END));
            }
        }

    }

    public static boolean overworldBiome(BiomeGenBase biome) {
	    List<SpawnListEntry> monsterList = ObfuscationReflectionHelper.getPrivateValue(BiomeGenBase.class, biome, "as", "field_76761_J", "spawnableMonsterList");
	    for(SpawnListEntry entity : monsterList) {
	        if(entity.entityClass == EntityZombie.class) return true;
	    }
	    return false;
	}

    public static ResourceLocation locate(String location) {
		return new ResourceLocation(NovaCraft.MODID, location);
	}

    public static String find(String location) {
		return modAddress() + location;
	}

    public static String modAddress() {
		return NovaCraft.MODID + ":";
	}
}
